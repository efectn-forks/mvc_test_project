// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mvc_proje.Database;

#nullable disable

namespace mvc_proje.Database.Migrations
{
    [DbContext(typeof(AppDbCtx))]
    [Migration("20250729200814_AddDescription")]
    partial class AddDescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("mvc_proje.Database.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Devices and gadgets",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Literature and educational materials",
                            Name = "Books"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Apparel and accessories",
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Household items and kitchenware",
                            Name = "Home & Kitchen"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Equipment for sports and outdoor activities",
                            Name = "Sports & Outdoors"
                        });
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ContactMessages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "test@test.com",
                            Message = "This is a test message.",
                            Name = "John Doe",
                            Subject = "Test Subject"
                        },
                        new
                        {
                            Id = 2,
                            Email = "test2@test.com",
                            Message = "This is another test message.",
                            Name = "Jane Smith",
                            Subject = "Another Test Subject"
                        });
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Product is waterproof",
                            Icon = "",
                            Link = "",
                            Title = "Waterproof"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Product supports Bluetooth connectivity",
                            Icon = "",
                            Link = "",
                            Title = "Bluetooth"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Product is energy efficient",
                            Icon = "",
                            Link = "",
                            Title = "Energy Efficient"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Product includes smart technology features",
                            Icon = "",
                            Link = "",
                            Title = "Smart Technology"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Product is made from eco-friendly materials",
                            Icon = "",
                            Link = "",
                            Title = "Eco-Friendly"
                        });
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Dependency Injection (DI) is a design pattern that allows for the decoupling of classes and their dependencies. In ASP.NET Core, DI is built-in and can be configured in the Startup class.",
                            CreatedAt = new DateTime(2025, 7, 29, 20, 8, 13, 334, DateTimeKind.Utc).AddTicks(9773),
                            Description = "",
                            Title = "Understanding Dependency Injection in ASP.NET Core",
                            UpdatedAt = new DateTime(2025, 7, 29, 20, 8, 13, 334, DateTimeKind.Utc).AddTicks(9773),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Entity Framework Core (EF Core) is an open-source, lightweight, extensible, and cross-platform version of Entity Framework. It is used to access databases in .NET applications.",
                            CreatedAt = new DateTime(2025, 7, 29, 20, 8, 13, 335, DateTimeKind.Utc).AddTicks(1431),
                            Description = "",
                            Title = "Exploring Entity Framework Core",
                            UpdatedAt = new DateTime(2025, 7, 29, 20, 8, 13, 335, DateTimeKind.Utc).AddTicks(1431),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            Description = "Description for Product 1",
                            Name = "Product 1",
                            Price = 19.99m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Description for Product 2",
                            Name = "Product 2",
                            Price = 29.99m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Description for Product 3",
                            Name = "Product 3",
                            Price = 39.99m,
                            Stock = 75
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Description for Product 4",
                            Name = "Product 4",
                            Price = 49.99m,
                            Stock = 20
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            Description = "Description for Product 5",
                            Name = "Product 5",
                            Price = 59.99m,
                            Stock = 10
                        });
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Admin St, Admin City",
                            Email = "mail1@mail.com",
                            FullName = "Admin User",
                            Password = "$2a$11$gu0rv87tx938Dso20uk/ae6jWYDyRCe42mFKRLfi3pAl6VN0qfUhm",
                            PhoneNumber = "1234567890",
                            Role = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 User Ave, User City",
                            Email = "mail2@mail.com",
                            FullName = "User One",
                            Password = "$2a$11$gu0rv87tx938Dso20uk/ae6jWYDyRCe42mFKRLfi3pAl6VN0qfUhm",
                            PhoneNumber = "0987654321",
                            Role = 0,
                            Username = "user1"
                        },
                        new
                        {
                            Id = 3,
                            Address = "456 User Ave, User City",
                            Email = "mail3@mail.com",
                            FullName = "User Three",
                            Password = "$2a$11$gu0rv87tx938Dso20uk/ae6jWYDyRCe42mFKRLfi3pAl6VN0qfUhm",
                            PhoneNumber = "0987654321",
                            Role = 0,
                            Username = "user3"
                        },
                        new
                        {
                            Id = 4,
                            Address = "456 User Ave, User City",
                            Email = "mail4@mail.com",
                            FullName = "User Four",
                            Password = "$2a$11$gu0rv87tx938Dso20uk/ae6jWYDyRCe42mFKRLfi3pAl6VN0qfUhm",
                            PhoneNumber = "0987654321",
                            Role = 0,
                            Username = "user4"
                        },
                        new
                        {
                            Id = 5,
                            Address = "456 User Ave, User City",
                            Email = "mail5@mail.com",
                            FullName = "User Five",
                            Password = "$2a$11$gu0rv87tx938Dso20uk/ae6jWYDyRCe42mFKRLfi3pAl6VN0qfUhm",
                            PhoneNumber = "0987654321",
                            Role = 0,
                            Username = "user5"
                        });
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Comment", b =>
                {
                    b.HasOne("mvc_proje.Database.Entities.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("mvc_proje.Database.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc_proje.Database.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Order", b =>
                {
                    b.HasOne("mvc_proje.Database.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc_proje.Database.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Post", b =>
                {
                    b.HasOne("mvc_proje.Database.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Product", b =>
                {
                    b.HasOne("mvc_proje.Database.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Review", b =>
                {
                    b.HasOne("mvc_proje.Database.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mvc_proje.Database.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("mvc_proje.Database.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
